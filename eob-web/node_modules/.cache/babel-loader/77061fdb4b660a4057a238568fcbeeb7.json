{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yingl\\\\Google Drive\\\\Laioffer_FullStack\\\\code\\\\flagcamp\\\\E-order-Butler\\\\eob-web\\\\src\\\\components\\\\demo.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport axios from \"axios\";\nimport authHeader from \"../services/auth-header\";\nimport Detail from \"./Detail\";\nconst url_getall = \"http://localhost:8085/eOrderButler/getAllShoppingOrders\"; // const useRowStyles = makeStyles({\n//     root: {\n//         '& > *': {\n//             borderBottom: 'unset',\n//         },\n//     },\n// });\n//\n// function createData(name, calories, fat, carbs, protein, price) {\n//     return {\n//         name,\n//         calories,\n//         fat,\n//         carbs,\n//         protein,\n//         price,\n//         history: [\n//             { date: '2020-01-05', customerId: '11091700', amount: 3 },\n//             { date: '2020-01-02', customerId: 'Anonymous', amount: 1 },\n//         ],\n//     };\n// }\n//\n// function Row(props) {\n//     const { row } = props;\n//     const [open, setOpen] = React.useState(false);\n//     const classes = useRowStyles();\n//\n//     return (\n//         <React.Fragment>\n//             <TableRow className={classes.root}>\n//                 <TableCell>\n//                     <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\n//                         {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n//                     </IconButton>\n//                 </TableCell>\n//                 <TableCell component=\"th\" scope=\"row\">\n//                     {row.name}\n//                 </TableCell>\n//                 <TableCell align=\"right\">{row.calories}</TableCell>\n//                 <TableCell align=\"right\">{row.fat}</TableCell>\n//                 <TableCell align=\"right\">{row.carbs}</TableCell>\n//                 <TableCell align=\"right\">{row.protein}</TableCell>\n//             </TableRow>\n//             <TableRow>\n//                 <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n//                     <Collapse in={open} timeout=\"auto\" unmountOnExit>\n//                         <Box margin={1}>\n//                             <Typography variant=\"h6\" gutterBottom component=\"div\">\n//                                 History\n//                             </Typography>\n//                             <Table size=\"small\" aria-label=\"purchases\">\n//                                 <TableHead>\n//                                     <TableRow>\n//                                         <TableCell>Date</TableCell>\n//                                         <TableCell>Customer</TableCell>\n//                                         <TableCell align=\"right\">Amount</TableCell>\n//                                         <TableCell align=\"right\">Total price ($)</TableCell>\n//                                     </TableRow>\n//                                 </TableHead>\n//                                 <TableBody>\n//                                     {row.history.map((historyRow) => (\n//                                         <TableRow key={historyRow.date}>\n//                                             <TableCell component=\"th\" scope=\"row\">\n//                                                 {historyRow.date}\n//                                             </TableCell>\n//                                             <TableCell>{historyRow.customerId}</TableCell>\n//                                             <TableCell align=\"right\">{historyRow.amount}</TableCell>\n//                                             <TableCell align=\"right\">\n//                                                 {Math.round(historyRow.amount * row.price * 100) / 100}\n//                                             </TableCell>\n//                                         </TableRow>\n//                                     ))}\n//                                 </TableBody>\n//                             </Table>\n//                         </Box>\n//                     </Collapse>\n//                 </TableCell>\n//             </TableRow>\n//         </React.Fragment>\n//     );\n// }\n//\n// Row.propTypes = {\n//     row: PropTypes.shape({\n//         calories: PropTypes.number.isRequired,\n//         carbs: PropTypes.number.isRequired,\n//         fat: PropTypes.number.isRequired,\n//         history: PropTypes.arrayOf(\n//             PropTypes.shape({\n//                 amount: PropTypes.number.isRequired,\n//                 customerId: PropTypes.string.isRequired,\n//                 date: PropTypes.string.isRequired,\n//             }),\n//         ).isRequired,\n//         name: PropTypes.string.isRequired,\n//         price: PropTypes.number.isRequired,\n//         protein: PropTypes.number.isRequired,\n//     }).isRequired,\n// };\n//\n// const rows = [\n//     createData('Frozen yoghurt', 159, 6.0, 24, 4.0, 3.99),\n//     createData('Ice cream sandwich', 237, 9.0, 37, 4.3, 4.99),\n//     createData('Eclair', 262, 16.0, 24, 6.0, 3.79),\n//     createData('Cupcake', 305, 3.7, 67, 4.3, 2.5),\n//     createData('Gingerbread', 356, 16.0, 49, 3.9, 1.5),\n// ];\n//\n//\n// export default function CollapsibleTable() {\n//     return (\n//         <TableContainer component={Paper}>\n//             <Table aria-label=\"collapsible table\">\n//                 <TableHead>\n//                     <TableRow>\n//                         <TableCell />\n//                         <TableCell>Dessert (100g serving)</TableCell>\n//                         <TableCell align=\"right\">Calories</TableCell>\n//                         <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n//                         <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n//                         <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\n//                     </TableRow>\n//                 </TableHead>\n//                 <TableBody>\n//                     {rows.map((row) => (\n//                         <Row key={row.name} row={row} />\n//                     ))}\n//                 </TableBody>\n//             </Table>\n//         </TableContainer>\n//     );\n// }\n\nclass CollapsibleTable extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [{\n        id: 1,\n        date: \"2014-04-18\",\n        total: 121.0,\n        status: \"Shipped\",\n        name: \"A\",\n        points: 5,\n        percent: 50\n      }, {\n        id: 2,\n        date: \"2014-04-21\",\n        total: 121.0,\n        status: \"Not Shipped\",\n        name: \"B\",\n        points: 10,\n        percent: 60\n      }, {\n        id: 3,\n        date: \"2014-08-09\",\n        total: 121.0,\n        status: \"Not Shipped\",\n        name: \"C\",\n        points: 15,\n        percent: 70\n      }, {\n        id: 4,\n        date: \"2014-04-24\",\n        total: 121.0,\n        status: \"Shipped\",\n        name: \"D\",\n        points: 20,\n        percent: 80\n      }, {\n        id: 5,\n        date: \"2014-04-26\",\n        total: 121.0,\n        status: \"Shipped\",\n        name: \"E\",\n        points: 25,\n        percent: 90\n      }],\n      expandedRows: []\n    };\n  }\n\n  handleRowClick(rowId) {\n    const currentExpandedRows = this.state.expandedRows;\n    const isRowCurrentlyExpanded = currentExpandedRows.includes(rowId);\n    const newExpandedRows = isRowCurrentlyExpanded ? currentExpandedRows.filter(id => id !== rowId) : currentExpandedRows.concat(rowId);\n    this.setState({\n      expandedRows: newExpandedRows\n    });\n  }\n\n  renderItem(item) {\n    const clickCallback = () => this.handleRowClick(item.id);\n\n    const itemRows = [/*#__PURE__*/React.createElement(\"tr\", {\n      onClick: clickCallback,\n      key: \"row-data-\" + item.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }\n    }, item.date), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }\n    }, item.total), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }\n    }, item.status))];\n\n    if (this.state.expandedRows.includes(item.id)) {\n      itemRows.push( /*#__PURE__*/React.createElement(\"tr\", {\n        key: \"row-expanded-\" + item.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }\n      }, item.name), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }\n      }, item.points), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }\n      }, item.percent)));\n    }\n\n    return itemRows;\n  }\n\n  render() {\n    let allItemRows = [];\n    this.state.data.forEach(item => {\n      const perItemRows = this.renderItem(item);\n      allItemRows = allItemRows.concat(perItemRows);\n    });\n    return /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 13\n      }\n    }, allItemRows);\n  }\n\n}\n\nexport default CollapsibleTable;","map":{"version":3,"sources":["C:/Users/yingl/Google Drive/Laioffer_FullStack/code/flagcamp/E-order-Butler/eob-web/src/components/demo.js"],"names":["React","PropTypes","makeStyles","Box","Collapse","IconButton","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Typography","Paper","KeyboardArrowDownIcon","KeyboardArrowUpIcon","axios","authHeader","Detail","url_getall","CollapsibleTable","Component","constructor","state","data","id","date","total","status","name","points","percent","expandedRows","handleRowClick","rowId","currentExpandedRows","isRowCurrentlyExpanded","includes","newExpandedRows","filter","concat","setState","renderItem","item","clickCallback","itemRows","push","render","allItemRows","forEach","perItemRows"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport axios from \"axios\";\r\nimport authHeader from \"../services/auth-header\";\r\nimport Detail from \"./Detail\";\r\n\r\nconst url_getall = \"http://localhost:8085/eOrderButler/getAllShoppingOrders\";\r\n\r\n\r\n// const useRowStyles = makeStyles({\r\n//     root: {\r\n//         '& > *': {\r\n//             borderBottom: 'unset',\r\n//         },\r\n//     },\r\n// });\r\n//\r\n// function createData(name, calories, fat, carbs, protein, price) {\r\n//     return {\r\n//         name,\r\n//         calories,\r\n//         fat,\r\n//         carbs,\r\n//         protein,\r\n//         price,\r\n//         history: [\r\n//             { date: '2020-01-05', customerId: '11091700', amount: 3 },\r\n//             { date: '2020-01-02', customerId: 'Anonymous', amount: 1 },\r\n//         ],\r\n//     };\r\n// }\r\n//\r\n// function Row(props) {\r\n//     const { row } = props;\r\n//     const [open, setOpen] = React.useState(false);\r\n//     const classes = useRowStyles();\r\n//\r\n//     return (\r\n//         <React.Fragment>\r\n//             <TableRow className={classes.root}>\r\n//                 <TableCell>\r\n//                     <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n//                         {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n//                     </IconButton>\r\n//                 </TableCell>\r\n//                 <TableCell component=\"th\" scope=\"row\">\r\n//                     {row.name}\r\n//                 </TableCell>\r\n//                 <TableCell align=\"right\">{row.calories}</TableCell>\r\n//                 <TableCell align=\"right\">{row.fat}</TableCell>\r\n//                 <TableCell align=\"right\">{row.carbs}</TableCell>\r\n//                 <TableCell align=\"right\">{row.protein}</TableCell>\r\n//             </TableRow>\r\n//             <TableRow>\r\n//                 <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n//                     <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n//                         <Box margin={1}>\r\n//                             <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n//                                 History\r\n//                             </Typography>\r\n//                             <Table size=\"small\" aria-label=\"purchases\">\r\n//                                 <TableHead>\r\n//                                     <TableRow>\r\n//                                         <TableCell>Date</TableCell>\r\n//                                         <TableCell>Customer</TableCell>\r\n//                                         <TableCell align=\"right\">Amount</TableCell>\r\n//                                         <TableCell align=\"right\">Total price ($)</TableCell>\r\n//                                     </TableRow>\r\n//                                 </TableHead>\r\n//                                 <TableBody>\r\n//                                     {row.history.map((historyRow) => (\r\n//                                         <TableRow key={historyRow.date}>\r\n//                                             <TableCell component=\"th\" scope=\"row\">\r\n//                                                 {historyRow.date}\r\n//                                             </TableCell>\r\n//                                             <TableCell>{historyRow.customerId}</TableCell>\r\n//                                             <TableCell align=\"right\">{historyRow.amount}</TableCell>\r\n//                                             <TableCell align=\"right\">\r\n//                                                 {Math.round(historyRow.amount * row.price * 100) / 100}\r\n//                                             </TableCell>\r\n//                                         </TableRow>\r\n//                                     ))}\r\n//                                 </TableBody>\r\n//                             </Table>\r\n//                         </Box>\r\n//                     </Collapse>\r\n//                 </TableCell>\r\n//             </TableRow>\r\n//         </React.Fragment>\r\n//     );\r\n// }\r\n//\r\n// Row.propTypes = {\r\n//     row: PropTypes.shape({\r\n//         calories: PropTypes.number.isRequired,\r\n//         carbs: PropTypes.number.isRequired,\r\n//         fat: PropTypes.number.isRequired,\r\n//         history: PropTypes.arrayOf(\r\n//             PropTypes.shape({\r\n//                 amount: PropTypes.number.isRequired,\r\n//                 customerId: PropTypes.string.isRequired,\r\n//                 date: PropTypes.string.isRequired,\r\n//             }),\r\n//         ).isRequired,\r\n//         name: PropTypes.string.isRequired,\r\n//         price: PropTypes.number.isRequired,\r\n//         protein: PropTypes.number.isRequired,\r\n//     }).isRequired,\r\n// };\r\n//\r\n// const rows = [\r\n//     createData('Frozen yoghurt', 159, 6.0, 24, 4.0, 3.99),\r\n//     createData('Ice cream sandwich', 237, 9.0, 37, 4.3, 4.99),\r\n//     createData('Eclair', 262, 16.0, 24, 6.0, 3.79),\r\n//     createData('Cupcake', 305, 3.7, 67, 4.3, 2.5),\r\n//     createData('Gingerbread', 356, 16.0, 49, 3.9, 1.5),\r\n// ];\r\n//\r\n//\r\n// export default function CollapsibleTable() {\r\n//     return (\r\n//         <TableContainer component={Paper}>\r\n//             <Table aria-label=\"collapsible table\">\r\n//                 <TableHead>\r\n//                     <TableRow>\r\n//                         <TableCell />\r\n//                         <TableCell>Dessert (100g serving)</TableCell>\r\n//                         <TableCell align=\"right\">Calories</TableCell>\r\n//                         <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\r\n//                         <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\r\n//                         <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\r\n//                     </TableRow>\r\n//                 </TableHead>\r\n//                 <TableBody>\r\n//                     {rows.map((row) => (\r\n//                         <Row key={row.name} row={row} />\r\n//                     ))}\r\n//                 </TableBody>\r\n//             </Table>\r\n//         </TableContainer>\r\n//     );\r\n// }\r\n\r\nclass CollapsibleTable extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            data : [\r\n                {id : 1, date : \"2014-04-18\", total : 121.0, status : \"Shipped\", name : \"A\", points: 5, percent : 50},\r\n                {id : 2, date : \"2014-04-21\", total : 121.0, status : \"Not Shipped\", name : \"B\", points: 10, percent: 60},\r\n                {id : 3, date : \"2014-08-09\", total : 121.0, status : \"Not Shipped\", name : \"C\", points: 15, percent: 70},\r\n                {id : 4, date : \"2014-04-24\", total : 121.0, status : \"Shipped\", name : \"D\", points: 20, percent : 80},\r\n                {id : 5, date : \"2014-04-26\", total : 121.0, status : \"Shipped\", name : \"E\", points: 25, percent : 90},\r\n            ],\r\n            expandedRows : []\r\n        };\r\n    }\r\n\r\n    handleRowClick(rowId) {\r\n        const currentExpandedRows = this.state.expandedRows;\r\n        const isRowCurrentlyExpanded = currentExpandedRows.includes(rowId);\r\n\r\n        const newExpandedRows = isRowCurrentlyExpanded ?\r\n            currentExpandedRows.filter(id => id !== rowId) :\r\n            currentExpandedRows.concat(rowId);\r\n\r\n        this.setState({expandedRows : newExpandedRows});\r\n    }\r\n\r\n    renderItem(item) {\r\n        const clickCallback = () => this.handleRowClick(item.id);\r\n        const itemRows = [\r\n            <tr onClick={clickCallback} key={\"row-data-\" + item.id}>\r\n                <td>{item.date}</td>\r\n                <td>{item.total}</td>\r\n                <td>{item.status}</td>\r\n            </tr>\r\n        ];\r\n\r\n        if(this.state.expandedRows.includes(item.id)) {\r\n            itemRows.push(\r\n                <tr key={\"row-expanded-\" + item.id}>\r\n                    <td>{item.name}</td>\r\n                    <td>{item.points}</td>\r\n                    <td>{item.percent}</td>\r\n                </tr>\r\n            );\r\n        }\r\n\r\n        return itemRows;\r\n    }\r\n\r\n    render() {\r\n        let allItemRows = [];\r\n\r\n        this.state.data.forEach(item => {\r\n            const perItemRows = this.renderItem(item);\r\n            allItemRows = allItemRows.concat(perItemRows);\r\n        });\r\n\r\n        return (\r\n            <table>{allItemRows}</table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CollapsibleTable;"]},"metadata":{},"sourceType":"module"}